{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"gam",
				"gameOver"
			],
			[
				"up",
				"updateBuys"
			],
			[
				"other",
				"otherPlayers"
			],
			[
				"ga",
				"gameid"
			],
			[
				"post",
				"POST"
			],
			[
				"play",
				"playCard"
			],
			[
				"cur",
				"currentPlayer"
			],
			[
				"next",
				"nextTurn"
			],
			[
				"player",
				"playerChoice"
			],
			[
				"callba",
				"callback"
			],
			[
				"act",
				"actions"
			],
			[
				"n",
				"num"
			],
			[
				"upd",
				"setUpdate"
			],
			[
				"ch",
				"choice"
			],
			[
				"bu",
				"buyPhase"
			],
			[
				"buy",
				"buy"
			],
			[
				"gai",
				"gainCard"
			],
			[
				"curr",
				"currentTurn"
			],
			[
				"dis",
				"discardCard"
			],
			[
				"game",
				"gameid"
			],
			[
				"ca",
				"categories"
			],
			[
				"c",
				"choice"
			],
			[
				"fun",
				"function"
			],
			[
				"cle",
				"cleanupPhase"
			],
			[
				"prom",
				"promptCardFromHand"
			],
			[
				"Trea",
				"TreasureCard"
			],
			[
				"fu",
				"function"
			],
			[
				"v",
				"village"
			],
			[
				"smith",
				"smithy"
			],
			[
				"Actio",
				"ActionCard"
			],
			[
				"pla",
				"player"
			],
			[
				"r",
				"return"
			],
			[
				"crr",
				"currentPlayer"
			],
			[
				"Gan",
				"gainedCard"
			],
			[
				"co",
				"coins"
			],
			[
				"villag",
				"villageAction"
			],
			[
				"updat",
				"updateActions"
			],
			[
				"chapel",
				"chapelAction"
			],
			[
				"card",
				"card"
			]
		]
	},
	"buffers":
	[
		{
			"file": "dominion.py",
			"settings":
			{
				"buffer_size": 16090,
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/js/game.js",
			"settings":
			{
				"buffer_size": 8373,
				"line_ending": "Windows"
			}
		},
		{
			"file": "sets.py",
			"settings":
			{
				"buffer_size": 39,
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/pages/game.html",
			"settings":
			{
				"buffer_size": 1791,
				"line_ending": "Windows"
			}
		},
		{
			"file": "playerState.py",
			"settings":
			{
				"buffer_size": 910,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "from card import *\nfrom baseCards import feast\nimport dill\nimport simplejson as sjson\nclass Turn(object):\n    def __init__(self, player, otherPlayers, roundNumber, log, game):\n        self.game = game\n        self.player = player\n        self.otherPlayers = otherPlayers\n        self.actions = 1\n        self.buys = 1\n        self.coins = 5\n        self.hand = player.hand\n        self.currentPlayer = player\n        self.playerChoice={}\n        self.log = log\n        self.prompt = \"\"\n        self.log.append(\"It is %s's turn\" % self.player)\n        self.playerDecision = {}\n\n        for player in otherPlayers:\n            self.playerChoice[player.name] = None\n\n        if self.player.hasAction():\n            self.log.append(\"Action Phase\")\n            self.phase = \"action\"\n            print \"about to prompt!!\"\n            self.promptAction()\n            print self.playerChoice[self.player.name], \"choice\"\n        elif self.player.hasTreasure():\n            self.startBuyPhase()\n        else:\n            self.endTurn()\n \n    def endTurn(self):\n        self.phase = [\"cleanup\"]\n        self.cleanupPhase()\n\n    def toDict(self):\n        return {\"actions\":self.actions,\"buys\":self.buys,\n                \"coins\":self.coins}\n\n    def startBuyPhase(self):\n        self.log.append(\"Buy Phase\")\n        self.phase = \"buy\"\n        self.promptBuy()\n\n    def updateActions(self,num):\n        self.actions += num\n    \n    def updateBuys(self, num):\n        self.buys += num\n\n    def buyCard(self, card):\n        ##TODO: react to buying cards\n        self.updateBuys(-1)\n        self.coins -= card.cost\n        self.log.append(\"%s bought a %s for $%d\" % (self.currentPlayer, card.name, card.cost))\n        self.gainCard(card)\n\n    def gainCard(self,card):\n        if self.player.supply.gainCard(card) is None:\n            return False\n        self.player.discardCard(card)\n\n\n    def trashCard(self,card,player=None):\n        if player is None:\n            player = self.player\n        player.hand.remove(card)\n        player.supply.trashCard(card)\n\n    def handleReactions(self,player):\n        blocked = False\n        reactionCards = player.getReactionCards()\n        for card in reactionCards:\n            if card.reaction(player):\n                blocked = True\n        return blocked\n\n    def promptAction(self):\n        self.promptCardFromHand(\"turn.playCard\", kind=\"ActionCard\", may=True)\n\n    def promptBuy(self):\n        self.promptCardFromHand('turn.playCard', kind=\"TreasureCard\", may=True)\n\n    def promptGain(self,cost, kind = None, player=None):\n        if player is None:\n            player = self.currentPlayer\n        prompt = \"Pick a card from the supply costing less than %d\" % cost\n\n        self.playerChoice[player.name] = {\"type\":\"gain\",\n                                          \"cost\":cost,\n                                          \"kind\":str(kind),\n                                          \"prompt\":prompt}\n\n    def promptCardFromHand(self,callback, cost=None,kind=None,player=None,num=1, may = False, prompt = None):\n        print \"prompt Hand\"\n        if player is None:\n            player = self.currentPlayer\n        if prompt is None:\n            if None is not kind:\n                prompt = \"Pick a %s card from your hand\" % str(kind).lower()[:-4]\n            else:\n                prompt = \"Pick a card from your hand\"\n            if cost is not None:\n                prompt += \" costing %d or less\" % cost \n        self.playerChoice[player.name] ={\"type\":\"fromHand\",\n                                        \"kind\":str(kind),\n                                        \"cost\": cost,\n                                        \"callback\":callback,\n                                        \"num\":num,\n                                        \"may\":may,\n                                        \"prompt\":prompt}\n        #print \"CHOICE\", self.playerChoice[player.name]\n\n    def promptOptions(self,options,player=None):\n        if player is None:\n            player = self.currentPlayer\n        prompt = \"Pick one: \"\n        self.playerChoice[player.name] = {\"type\":\"options\",\"options\":options, \"prompt\":prompt}\n\n\n    def removePlayer(self, name):\n        try:\n            del self.playerChoice[name]\n        except KeyError:\n            pass\n\n    \n\n    def cleanupPhase(self):\n        self.player.discardHand()\n        self.player.discardPlayed()\n        assert 0 == len(self.player.hand)\n        self.player.drawHand()\n        assert 5 == len(self.player.hand)\n        self.player.played = []\n\n    \n    \n    \n    def playCard(self, card):\n        if isinstance(card, basestring):\n            card = self.player.supply.strToCard(card)\n        self.player.hand.remove(card)\n        self.player.played.append(card)\n        res = card.play(self)\n        if card.isAction():\n            self.updateActions(-1)\n        if self.actions == 0 and res is None:\n            self.startBuyPhase()\n        return res\n\n    def printAllCards(self):\n        s = \"\"\n        for player in self.otherPlayers + [self.player]:\n            s += \"%s\\n\" % player\n            s += \"hand\\t%s\\n\" % (self.printSet(player.hand))\n            s += \"played\\t%s\\n\" % (self.printSet(player.played))\n            s +=  \"discard\\t%s\\n\" % (self.printSet(player.discard))\n            s += \"deck\\t%s\\n\" % (self.printSet(player.deck.deck))\n        s += (\"%s\" % player.supply.getPiles()) + \"\\n\"\n        print s\n\n    def updateTurn(self, playerName):\n        choice = self.playerChoice[playerName]\n\n        if choice.has_key('num') and choice['num'] > 0:\n            choice['num'] -= 1\n        if choice['num'] == 0:\n            if playerName == self.player.name:\n                if self.phase == 'action':\n                    if self.actions > 0 and self.player.hasAction():\n                        self.promptAction()\n                    else:\n                        self.startBuyPhase()\n                elif self.phase == 'buy' and self.buys > 0 :\n                    self.promptBuy()\n                else:\n                    self.game.nextTurn()\n            else:\n                choice = None\n\n    def skipChoice(self, playerName):\n        self.playerChoice[playerName]['num'] = 1\n        self.updateTurn(playerName)\n\n\n    @staticmethod #this means that it doesn't take self as a parameter. In other words it is just a vanilia function.\n    def printSet(List):\n        s = ''\n        for i,element in enumerate(set(List)):\n            s += \"(%d) %s \\t \"% (List.count(element),element)\n\n        return s+'\\n'\n\n    ## Fuction to check if string is a number\n    @staticmethod \n    def is_number(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n",
			"file": "turn.py",
			"file_size": 6890,
			"file_write_time": 130482289493956828,
			"settings":
			{
				"buffer_size": 6686,
				"line_ending": "Windows"
			}
		},
		{
			"file": "card.py",
			"settings":
			{
				"buffer_size": 2451,
				"line_ending": "Windows"
			}
		},
		{
			"file": "baseCards.py",
			"settings":
			{
				"buffer_size": 9794,
				"line_ending": "Windows"
			}
		},
		{
			"file": "game.py",
			"settings":
			{
				"buffer_size": 3248,
				"line_ending": "Windows"
			}
		},
		{
			"file": "supply.py",
			"settings":
			{
				"buffer_size": 3088,
				"line_ending": "Windows"
			}
		},
		{
			"file": "player.py",
			"settings":
			{
				"buffer_size": 3361,
				"line_ending": "Windows"
			}
		},
		{
			"file": "deck.py",
			"settings":
			{
				"buffer_size": 557,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"pac",
				"Package Control: Discover Packages"
			],
			[
				"",
				"Preferences: Browse Packages"
			]
		],
		"width": 512.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/willem/Documents/Dominion/playerState.py",
		"/C/Users/willem/Documents/WD/baseCards.py",
		"/C/Users/willem/Documents/Dominion/Dominion.sublime-project",
		"/C/Users/willem/Documents/WD/supply.py",
		"/C/Users/willem/Documents/WD/sets.py",
		"/C/Users/willem/Documents/WD/player.py",
		"/C/Users/willem/Documents/WD/game.py",
		"/C/Users/willem/Documents/WD/deck.py",
		"/C/Users/willem/Documents/WD/turn.py",
		"/C/Users/willem/Documents/WD/Dominion.sublime-project",
		"/C/Users/willem/Documents/WD/Dominion.sublime-workspace",
		"/C/Users/willem/Documents/WD/card.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"<open files>"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"startBuy",
			"log.append(\"Buy",
			"log.append(\"buy",
			"CHOICE",
			"STATE",
			"print State",
			"buyCard",
			"promptA",
			"$",
			"trash",
			"/buy",
			"buy",
			"self.playC",
			"playerC",
			"playerChoi",
			"promptCardFromHand",
			"name",
			"playCard",
			"prompt",
			"strTo",
			"getState",
			"promptCardFromHand",
			"getstate",
			"print",
			"print s",
			"print su",
			"pickle",
			"self.playCard",
			"playCard",
			"play",
			"print",
			"buyPhase",
			"decision",
			"clean",
			"duration"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "dominion.py",
					"settings":
					{
						"buffer_size": 16090,
						"regions":
						{
						},
						"selection":
						[
							[
								13715,
								13715
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6273.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "static/js/game.js",
					"settings":
					{
						"buffer_size": 8373,
						"regions":
						{
						},
						"selection":
						[
							[
								1282,
								1282
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2879.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "sets.py",
					"settings":
					{
						"buffer_size": 39,
						"regions":
						{
						},
						"selection":
						[
							[
								39,
								39
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "static/pages/game.html",
					"settings":
					{
						"buffer_size": 1791,
						"regions":
						{
						},
						"selection":
						[
							[
								1015,
								1015
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 126.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "playerState.py",
					"settings":
					{
						"buffer_size": 910,
						"regions":
						{
						},
						"selection":
						[
							[
								709,
								709
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 5,
					"file": "turn.py",
					"settings":
					{
						"buffer_size": 6686,
						"regions":
						{
						},
						"selection":
						[
							[
								5923,
								5923
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 49.0,
						"translation.y": 2316.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "card.py",
					"settings":
					{
						"buffer_size": 2451,
						"regions":
						{
						},
						"selection":
						[
							[
								894,
								894
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 7,
					"file": "baseCards.py",
					"settings":
					{
						"buffer_size": 9794,
						"regions":
						{
						},
						"selection":
						[
							[
								3582,
								3582
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1074.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "game.py",
					"settings":
					{
						"buffer_size": 3248,
						"regions":
						{
						},
						"selection":
						[
							[
								1674,
								1674
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 589.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "supply.py",
					"settings":
					{
						"buffer_size": 3088,
						"regions":
						{
						},
						"selection":
						[
							[
								1114,
								1114
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 813.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "player.py",
					"settings":
					{
						"buffer_size": 3361,
						"regions":
						{
						},
						"selection":
						[
							[
								1146,
								1146
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "deck.py",
					"settings":
					{
						"buffer_size": 557,
						"regions":
						{
						},
						"selection":
						[
							[
								202,
								202
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.282113821138,
			0.59918699187,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 118.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 50.0,
	"status_bar_visible": true
}
